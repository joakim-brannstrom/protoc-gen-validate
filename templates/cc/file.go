package cc

const moduleFileTpl = `// Code generated by protoc-gen-validate
// source: {{ .InputPath }}
// DO NOT EDIT!!!

#include "{{ output .File ".validate.h" }}"

#include <algorithm>
#include <string>
#include <unordered_set>
#include <vector>

#include "pgv/constants.hpp"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace {
using std::string;

{{ range .AllMessages }}
{{- if not (ignored .) -}}
{{- if not (disabled .) -}}

pgv::Validator<{{ class . }}> {{ staticVarName . }}(static_cast<bool(*)(const google::protobuf::Message&, const {{ class .}}&, pgv::ValidationLog*)>({{ package .}}::validate));

{{- end -}}
{{ end }}
{{ end }}

} // namespace validate
} // namespace pgv

{{ range .Package.ProtoName.SplitOnDot }}
namespace {{ . }} {
{{- end }}

{{ range .AllMessages }}
	{{- template "msg" . }}
{{ end }}

{{ range .Package.ProtoName.SplitOnDot -}}
} // namespace
{{ end }}
`

const headerFileTpl = `// Code generated by protoc-gen-validate
// source: {{ .InputPath }}
// DO NOT EDIT!!!

#pragma once

#include "pgv/validate.hpp"
#include "{{ output .File ".h" }}"

{{ range .Package.ProtoName.SplitOnDot }}
namespace {{ . }} {
{{- end }}

using std::string;

{{ range .AllMessages }}
	{{- template "decl" . }}
{{ end }}

{{ range .Package.ProtoName.SplitOnDot -}}
} // namespace {{ . }}
{{ end }}

namespace pgv {
using {{ package .Package }}::validate;
}
`
